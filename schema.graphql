type Query {
  node(id: ID!): Node
  bigFootSightings(
    "Returns the first n elements from the list."
    first: Int

    "Returns the last n elements from the list."
    last: Int

    "Returns the elements in the list that come before the specified cursor."
    before: String

    "Returns the elements in the list that come after the specified cursor."
    after: String
  ): BigFootSightingCursorConnection
  bigFootSighting(id: ID!): BigFootSighting
  comments(
    "Returns the first n elements from the list."
    first: Int

    "Returns the last n elements from the list."
    last: Int

    "Returns the elements in the list that come before the specified cursor."
    before: String

    "Returns the elements in the list that come after the specified cursor."
    after: String
  ): CommentCursorConnection
  comment(id: ID!): Comment
  users(
    "Returns the first n elements from the list."
    first: Int

    "Returns the last n elements from the list."
    last: Int

    "Returns the elements in the list that come before the specified cursor."
    before: String

    "Returns the elements in the list that come after the specified cursor."
    after: String
  ): UserCursorConnection
  user(id: ID!): User
}

"A node, according to the Relay specification."
interface Node {
  "The id of this node."
  id: ID!
}

"Cursor connection for BigFootSighting."
type BigFootSightingCursorConnection {
  edges: [BigFootSightingEdge]
  pageInfo: BigFootSightingPageInfo!
  totalCount: Int!
}

"Edge of BigFootSighting."
type BigFootSightingEdge {
  node: BigFootSighting
  cursor: String!
}

type BigFootSighting implements Node {
  id: ID!
  _id: Int!
  title: String!
  description: String!
  confidenceIndex: Int!
  latitude: String!
  longitude: String!
  owner: User!
  createdAt: String!
  comments(
    "Returns the first n elements from the list."
    first: Int

    "Returns the last n elements from the list."
    last: Int

    "Returns the elements in the list that come before the specified cursor."
    before: String

    "Returns the elements in the list that come after the specified cursor."
    after: String
  ): CommentCursorConnection
  score: Int!
}

type User implements Node {
  id: ID!
  _id: Int!

  "A visual identifier that represents this user."
  username: String!

  email: String!
  password: String!
  roles: Iterable!
  bigFootSightings(
    "Returns the first n elements from the list."
    first: Int

    "Returns the last n elements from the list."
    last: Int

    "Returns the elements in the list that come before the specified cursor."
    before: String

    "Returns the elements in the list that come after the specified cursor."
    after: String
  ): BigFootSightingCursorConnection
  comments(
    "Returns the first n elements from the list."
    first: Int

    "Returns the last n elements from the list."
    last: Int

    "Returns the elements in the list that come before the specified cursor."
    before: String

    "Returns the elements in the list that come after the specified cursor."
    after: String
  ): CommentCursorConnection
  agreedToTermsAt: String!

  "Returns the salt that was originally used to encode the password."
  salt: String

  avatarUrl: String!
  userIdentifier: String!
}

"The `Iterable` scalar type represents an array or a Traversable with any kind of data."
scalar Iterable

"Cursor connection for Comment."
type CommentCursorConnection {
  edges: [CommentEdge]
  pageInfo: CommentPageInfo!
  totalCount: Int!
}

"Edge of Comment."
type CommentEdge {
  node: Comment
  cursor: String!
}

type Comment implements Node {
  id: ID!
  _id: Int!
  content: String!
  owner: User!
  bigFootSighting: BigFootSighting!
  createdAt: String!
}

"Information about the current page."
type CommentPageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

"Information about the current page."
type BigFootSightingPageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

"Cursor connection for User."
type UserCursorConnection {
  edges: [UserEdge]
  pageInfo: UserPageInfo!
  totalCount: Int!
}

"Edge of User."
type UserEdge {
  node: User
  cursor: String!
}

"Information about the current page."
type UserPageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Mutation {
  "Updates a BigFootSighting."
  updateBigFootSighting(input: updateBigFootSightingInput!): updateBigFootSightingPayload

  "Deletes a BigFootSighting."
  deleteBigFootSighting(input: deleteBigFootSightingInput!): deleteBigFootSightingPayload

  "Creates a BigFootSighting."
  createBigFootSighting(input: createBigFootSightingInput!): createBigFootSightingPayload

  "Updates a Comment."
  updateComment(input: updateCommentInput!): updateCommentPayload

  "Deletes a Comment."
  deleteComment(input: deleteCommentInput!): deleteCommentPayload

  "Creates a Comment."
  createComment(input: createCommentInput!): createCommentPayload

  "Updates a User."
  updateUser(input: updateUserInput!): updateUserPayload

  "Deletes a User."
  deleteUser(input: deleteUserInput!): deleteUserPayload

  "Creates a User."
  createUser(input: createUserInput!): createUserPayload
}

"Updates a BigFootSighting."
input updateBigFootSightingInput {
  id: ID!
  title: String
  description: String
  confidenceIndex: Int
  latitude: String
  longitude: String
  owner: String
  createdAt: String
  comments: [String]
  score: Int
  clientMutationId: String
}

"Updates a BigFootSighting."
type updateBigFootSightingPayload {
  bigFootSighting: BigFootSighting
  clientMutationId: String
}

"Deletes a BigFootSighting."
input deleteBigFootSightingInput {
  id: ID!
  clientMutationId: String
}

"Deletes a BigFootSighting."
type deleteBigFootSightingPayload {
  bigFootSighting: BigFootSighting
  clientMutationId: String
}

"Creates a BigFootSighting."
input createBigFootSightingInput {
  title: String!
  description: String!
  confidenceIndex: Int!
  latitude: String!
  longitude: String!
  owner: String!
  createdAt: String!
  comments: [String]
  score: Int!
  clientMutationId: String
}

"Creates a BigFootSighting."
type createBigFootSightingPayload {
  bigFootSighting: BigFootSighting
  clientMutationId: String
}

"Updates a Comment."
input updateCommentInput {
  id: ID!
  content: String
  owner: String
  bigFootSighting: String
  createdAt: String
  clientMutationId: String
}

"Updates a Comment."
type updateCommentPayload {
  comment: Comment
  clientMutationId: String
}

"Deletes a Comment."
input deleteCommentInput {
  id: ID!
  clientMutationId: String
}

"Deletes a Comment."
type deleteCommentPayload {
  comment: Comment
  clientMutationId: String
}

"Creates a Comment."
input createCommentInput {
  content: String!
  owner: String!
  bigFootSighting: String!
  createdAt: String!
  clientMutationId: String
}

"Creates a Comment."
type createCommentPayload {
  comment: Comment
  clientMutationId: String
}

"Updates a User."
input updateUserInput {
  id: ID!

  "A visual identifier that represents this user."
  username: String
  email: String
  password: String
  roles: Iterable
  bigFootSightings: [String]
  agreedToTermsAt: String
  clientMutationId: String
}

"Updates a User."
type updateUserPayload {
  user: User
  clientMutationId: String
}

"Deletes a User."
input deleteUserInput {
  id: ID!
  clientMutationId: String
}

"Deletes a User."
type deleteUserPayload {
  user: User
  clientMutationId: String
}

"Creates a User."
input createUserInput {
  "A visual identifier that represents this user."
  username: String!
  email: String!
  password: String!
  roles: Iterable!
  bigFootSightings: [String]
  agreedToTermsAt: String!
  clientMutationId: String
}

"Creates a User."
type createUserPayload {
  user: User
  clientMutationId: String
}
